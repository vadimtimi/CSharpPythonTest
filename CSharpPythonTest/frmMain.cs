using System;
using System.Drawing;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace CSharpPythonTest
{
    public partial class frmMain : Form
    {
        public frmMain()
        {
            InitializeComponent();
        }

        private void frmMain_Load(object sender, EventArgs e)
        {

            //Создание объекта, для работы с файлом
            INIManager manager = new INIManager(Environment.CurrentDirectory + "/CSharpPythonTest.ini");

            //Получить значение по ключу 
            txtPathPython.Text = manager.GetPrivateString("path", "paht_pythonexe");
            txtPathPic.Text = manager.GetPrivateString("path", "path_pic");
            txtPyScriptPath.Text = manager.GetPrivateString("path", "path_script");

        }

        private string testPicAnaliz(string pathonPath, string picPath, string PyScriptPath)
        {
            try
            {
                string tmp = "";

                System.Diagnostics.ProcessStartInfo start = new System.Diagnostics.ProcessStartInfo();
                //python interprater location
                start.FileName = pathonPath;
                //argument with file name and input parameters
                //start.Arguments = string.Format("{0} {1}", Path.Combine(AppDomain.CurrentDomain.BaseDirectory, PyScriptPath), picPath);
                start.Arguments = string.Format("{0} {1}", PyScriptPath, picPath);
                start.UseShellExecute = false;// Do not use OS shell
                start.CreateNoWindow = true; // We don't need new window
                start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
                start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
                start.LoadUserProfile = true;
                using (System.Diagnostics.Process process = System.Diagnostics.Process.Start(start))
                {
                    using (StreamReader reader = process.StandardOutput)
                    {
                        string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                        string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")

                        tmp = result.Replace("\r\n", "");

                        if (stderr != "")
                        {
                            MessageBox.Show(stderr);
                        }
                    }
                }

                return tmp;
            }
            catch(Exception err)
            {
                return err.Message;
            }
        }

        private async void testPicAnalizAcync(string pathonPath, string picPath, string PyScriptPath)
        {
            string tmp = "";
            tmp = await System.Threading.Tasks.Task.Run(() => testPicAnaliz(pathonPath, picPath, PyScriptPath));

            txtResult.Text = tmp;
            cmdRun.Enabled = true;
        }


        private void cmdPathPython_Click(object sender, EventArgs e)
        {
            try
            {
                var filePath = string.Empty;

                using (OpenFileDialog openFileDialog = new OpenFileDialog())
                {
                    openFileDialog.InitialDirectory = System.IO.Path.GetDirectoryName(txtPathPython.Text); // "c:\\";
                    openFileDialog.Filter = "python exe file (*.exe)|*.exe";
                    openFileDialog.FilterIndex = 2;
                    openFileDialog.RestoreDirectory = true;

                    if (openFileDialog.ShowDialog() == DialogResult.OK)
                    {
                        //Get the path of specified file
                        filePath = openFileDialog.FileName;
                        txtPathPython.Text = filePath;

                        //Создание объекта, для работы с файлом
                        INIManager manager = new INIManager(Environment.CurrentDirectory + "/CSharpPythonTest.ini");
                        //Записать значение по ключу age в секции main
                        manager.WritePrivateString("path", "paht_pythonexe", filePath);
                    }
                }
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message + " " + err.StackTrace);
            }
        }

        private void cmdPahtPic_Click(object sender, EventArgs e)
        {
            try
            { 
                var filePath = string.Empty;

                using (OpenFileDialog openFileDialog = new OpenFileDialog())
                {
                    openFileDialog.InitialDirectory = System.IO.Path.GetDirectoryName(txtPathPic.Text); // "c:\\";
                    openFileDialog.Filter = "pic file (*.jpg)|*.jpg";
                    openFileDialog.FilterIndex = 2;
                    openFileDialog.RestoreDirectory = true;

                    if (openFileDialog.ShowDialog() == DialogResult.OK)
                    {
                        //Get the path of specified file
                        filePath = openFileDialog.FileName;

                        txtPathPic.Text = filePath;
                        picPallet.Image = Image.FromFile(filePath);

                        //Создание объекта, для работы с файлом
                        INIManager manager = new INIManager(Environment.CurrentDirectory + "/CSharpPythonTest.ini");
                        //Записать значение по ключу age в секции main
                        manager.WritePrivateString("path", "path_pic", filePath);
                    }
                }
            }
            catch(Exception err)
            {
                MessageBox.Show(err.Message + " " + err.StackTrace);
            }
        }

        private void cmdPyScriptPath_Click(object sender, EventArgs e)
        {
            try
            {
                var filePath = string.Empty;

                using (OpenFileDialog openFileDialog = new OpenFileDialog())
                {
                    openFileDialog.InitialDirectory = System.IO.Path.GetDirectoryName(txtPyScriptPath.Text); // "c:\\";
                    openFileDialog.Filter = "python script file (*.py)|*.py";
                    openFileDialog.FilterIndex = 2;
                    openFileDialog.RestoreDirectory = true;

                    if (openFileDialog.ShowDialog() == DialogResult.OK)
                    {
                        //Get the path of specified file
                        filePath = openFileDialog.FileName;
                        txtPyScriptPath.Text = filePath;

                        //Создание объекта, для работы с файлом
                        INIManager manager = new INIManager(Environment.CurrentDirectory + "/CSharpPythonTest.ini");
                        //Записать значение по ключу age в секции main
                        manager.WritePrivateString("path", "path_script", filePath);
                    }
                }
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message + " " + err.StackTrace);
            }
        }


        // определение метода
        private string Factorial()
        {
            int result = 1;
            for (int i = 1; i <= 6; i++)
            {
                result *= i;
            }
            Thread.Sleep(3000);
            Console.WriteLine($"Факториал равен {result}");

            return "0;FREE;99";
        }

        // определение асинхронного метода
        private async void FactorialAsync()
        {
            Console.WriteLine("Начало метода FactorialAsync");                                     // выполняется синхронно
            string res = await System.Threading.Tasks.Task.Run(() => Factorial());                // выполняется асинхронно
            Console.WriteLine("Конец метода FactorialAsync");

            cmdRun.Enabled = true;
        }


        private void cmdRun_Click(object sender, EventArgs e)
        {
            try
            {
                cmdRun.Enabled = false;
                //FactorialAsync();

                txtResult.Text = "";
                testPicAnalizAcync(txtPathPython.Text, txtPathPic.Text, txtPyScriptPath.Text);
                //txtResult.Text = testPicAnaliz(txtPathPython.Text, txtPathPic.Text, txtPyScriptPath.Text);
                
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message + " " + err.StackTrace);
                cmdRun.Enabled = true;
            }
        }

    }
}
